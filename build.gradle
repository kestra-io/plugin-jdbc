plugins {
    id 'java-library'
    id "idea"
    id "com.adarshr.test-logger" version "3.2.0" apply(false)
    id "com.github.johnrengelman.shadow" version "7.1.2" apply(false)
    id 'ru.vyarus.java-lib' version '2.1.0' apply(false)
    id 'ru.vyarus.github-info' version '1.3.0' apply(false)
    id 'signing'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.42.0"
    id 'net.researchgate.release' version '3.0.1'
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

group "io.kestra.plugin"

subprojects {
    group "io.kestra.plugin"
    sourceCompatibility = 11

    repositories {
        mavenCentral()
        if (isBuildSnapshot) {
            maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
        }
    }

    apply plugin: "java-library"
    apply plugin: "idea"

    configurations {
        jdbcDriver
        api.extendsFrom(jdbcDriver)
    }

    dependencies {
        // lombok
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        compileOnly "org.projectlombok:lombok:$lombokVersion"

        // micronaut
        annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        annotationProcessor "io.micronaut:micronaut-inject-java"
        annotationProcessor "io.micronaut:micronaut-validation"
        compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
        compileOnly "io.micronaut:micronaut-inject"
        compileOnly "io.micronaut:micronaut-validation"

        // kestra
        compileOnly group: "io.kestra", name: "core", version: kestraVersion
    }
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
subprojects {
    apply plugin: "com.adarshr.test-logger"

    test {
        useJUnitPlatform()
    }

    testlogger {
        theme "mocha-parallel"
        showExceptions true
        showFullStackTraces true
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams true
    }

    dependencies {
        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        testImplementation "io.micronaut.test:micronaut-test-junit5"

        // test deps needed only for to have a runner
        testImplementation group: "io.kestra", name: "core", version: kestraVersion
        testImplementation group: "io.kestra", name: "repository-memory", version: kestraVersion
        testImplementation group: "io.kestra", name: "runner-memory", version: kestraVersion
        testImplementation group: "io.kestra", name: "storage-local", version: kestraVersion

        // test
        testImplementation "org.junit.jupiter:junit-jupiter-engine"
        testImplementation "org.hamcrest:hamcrest:2.2"
        testImplementation "org.hamcrest:hamcrest-library:2.2"

        testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'
        testImplementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    }
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
nexusPublishing {
    repositoryDescription = "${project.group}:${rootProject.name}:${project.version}"
    useStaging = !isBuildSnapshot
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
}

subprojects { Project subproject ->
    apply plugin: "com.adarshr.test-logger"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: 'ru.vyarus.github-info'
    apply plugin: 'ru.vyarus.java-lib'

    def group;

    if (subproject.name == "plugin-jdbc") {
        subproject.description = 'Abstract JDBC plugin for Kestra';
        group = project.group + ".jdbc"
    } else {
        subproject.description = subproject.name.substring(12, 13).toUpperCase() + subproject.name.substring(13)  + ' JDBC plugin for Kestra'
        group = project.group + ".jdbc." + subproject.name.replace('plugin-jdbc-', '')
    }

    github {
        user 'kestra-io'
        repository 'plugin-jdbc'
        license 'Apache'
    }

    jar {
        manifest {
            attributes(
                    "X-Kestra-Title": subproject.name,
                    "X-Kestra-Group": group,
                    "X-Kestra-Description": subproject.description,
                    "X-Kestra-Version": project.version
            )
        }
    }

    pom {
        developers {
            developer {
                id "tchiotludo"
                name "Ludovic Dehon"
            }
        }
    }

    signing {
        sign publishing.publications.maven
    }

    shadowJar {
        archiveClassifier.set(null)
        mergeServiceFiles()
    }
}


/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
