buildscript {
    ext {
        kestraVersion = "0.1.+"
        micronautVersion = "1.3.5"
        lombokVersion = "1.18.12"
    }
}

plugins {
    id 'java-library'
    id "idea"
    id "com.adarshr.test-logger" version "2.1.1" apply(false)
    id "com.github.johnrengelman.shadow" version "5.2.0" apply(false)
    id "maven-publish"
    id 'ru.vyarus.java-lib' version '2.1.0' apply(false)
    id 'ru.vyarus.github-info' version '1.2.0' apply(false)
    id "com.jfrog.bintray" version "1.8.4" apply(false)
    id 'net.researchgate.release' version '2.8.1'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

subprojects {
    group "org.kestra.task.jdbc"
    sourceCompatibility = 11

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/kestra/maven" }
    }

    apply plugin: "java-library"
    apply plugin: "idea"

    configurations {
        jdbcDriver
        api.extendsFrom(jdbcDriver)
    }

    dependencies {
        // micronaut
        annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        annotationProcessor "io.micronaut:micronaut-inject-java"
        compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
        compileOnly "io.micronaut:micronaut-inject"

        // lombok
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        compileOnly "org.projectlombok:lombok:$lombokVersion"

        // kestra
        compileOnly group: "org.kestra", name: "core", version: kestraVersion

        // deps
//        implementation project(':jdbc')
    }
}

/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
subprojects {
    apply plugin: "com.adarshr.test-logger"

    test {
        useJUnitPlatform()
    }

    testlogger {
        theme "mocha-parallel"
        showExceptions true
        showFullStackTraces true
        showStandardStreams true
        showPassedStandardStreams false
        showSkippedStandardStreams true
    }

    dependencies {
        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        testImplementation "io.micronaut.test:micronaut-test-junit5"

        // test deps needed only for to have a runner
        testImplementation group: "org.kestra", name: "repository-memory", version: kestraVersion
        testImplementation group: "org.kestra", name: "runner-memory", version: kestraVersion
        testImplementation group: "org.kestra", name: "storage-local", version: kestraVersion
//        testImplementation project(':jdbc').sourceSets.test.output

        // test
        testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.2"
        testImplementation "org.hamcrest:hamcrest:2.2"
        testImplementation "org.hamcrest:hamcrest-library:2.2"

        testCompile group: 'com.h2database', name: 'h2', version: '1.4.200'
        testCompile group: 'commons-codec', name: 'commons-codec', version: '1.15'
    }
}

/**********************************************************************************************************************\
 * Publish
 **********************************************************************************************************************/
subprojects { Project subproject ->
    apply plugin: "com.adarshr.test-logger"
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.bintray"
    apply plugin: 'ru.vyarus.java-lib'
    apply plugin: 'ru.vyarus.github-info'

    github {
        user 'kestra-io'
        repository 'tasks-jdbc'
        license 'Apache'
    }

    jar {
        manifest {
            attributes(
                    "X-Kestra-Title": project.name + "-" + subproject.name,
                    "X-Kestra-Group": project.group,
                    "X-Kestra-Version": project.version
            )
        }
    }

    shadowJar {
        archiveBaseName.set(rootProject.name + "-" + subproject.name)
        archiveClassifier.set(null)
        mergeServiceFiles()
    }

    publishing {
        publications {
            BintrayMavenPublication(MavenPublication) {
                version project.version

                groupId project.group
                artifactId subproject.name

                artifact shadowJar
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                    configurations.api.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['BintrayMavenPublication']
        publish = true
        pkg {
            userOrg = 'kestra'
            name = rootProject.name
            repo = 'maven'
            publicDownloadNumbers = true
            licenses = ['Apache-2.0']
            version {
                name = project.version
                released = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
                vcsTag = "v" + project.version
            }
        }
    }
}

/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
